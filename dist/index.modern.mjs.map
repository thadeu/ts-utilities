{"version":3,"file":"index.modern.mjs","sources":["../src/Exception.ts","../src/Util.ts","../src/index.ts"],"sourcesContent":["export class TryException extends Error {\n  statusCode: number\n\n  constructor(message: string, statusCode?: number) {\n    super(message)\n\n    this.name = 'TryException'\n    this.statusCode = statusCode || 400\n\n    Error.captureStackTrace(this, this.constructor)\n  }\n}\n","export const isFunction = fn => fn?.constructor?.name === 'Function'\nexport const isAsyncFunction = fn => fn?.constructor?.name === 'AsyncFunction'\nexport const isPlainRegex = input => input.constructor?.name === 'RegExp'\nexport const isPlainString = input => typeof input === 'string' && input.trim()\n\nexport const execute = (o, params = null) => {\n  if (isAsyncFunction(o)) {\n    return o(params)\n  }\n\n  if (isFunction(o)) {\n    return o(params)\n  }\n\n  return (() => o)()\n}\n\nexport const delay = ms => new Promise((resolve, reject) => setTimeout(resolve, ms))\n\nexport const race = (milliseconds, ...promises) => {\n  const timeout = new Promise((resolve, reject) => {\n    setTimeout(() => reject(`limit time excedded (${milliseconds} ms)`), milliseconds)\n  })\n\n  return Promise.race([timeout, ...promises])\n}\n","import { TryException } from '@/Exception'\nimport { execute, delay, race, isFunction, isAsyncFunction, isPlainString, isPlainRegex } from '@/Util'\n\nexport { delay, race, isAsyncFunction, isFunction, isPlainString, isPlainRegex, execute as Execute }\n\ninterface TryOptions {\n  max?: number\n  exponential?: number\n  count?: number\n  strict?: boolean\n  timeout?: number\n  onError?: any\n  async?: boolean\n  onRetry?: (count: number, isReached: boolean) => void\n}\n\nexport function safeTry<E = Error, T = any>(callable: any, options?: TryOptions): [E, T] | any {\n  const max = options?.max ?? 0\n  const isAsync = options?.async ?? isAsyncFunction(callable)\n  let count = options?.count ?? 0\n\n  try {\n    if (isAsync) {\n      return race(options?.timeout ?? 9_999, execute(callable))\n        .then(res => {\n          return [null, res]\n        })\n        .catch(e => {\n          if (count >= max) {\n            if (options?.onError) return [options.onError(e), null]\n\n            return [e, null]\n          }\n\n          count++\n\n          if (options?.onRetry) options.onRetry(count, count >= max)\n\n          return Try(callable, { ...options, count })\n        })\n    }\n\n    if (isFunction(callable)) {\n      return [null, execute(callable)]\n    }\n\n    return [null, execute(callable)]\n  } catch (error) {\n    if (count >= max) {\n      if (options?.strict) {\n        throw new TryException(error)\n      } else {\n        if (options?.onError) return [options.onError(error), null]\n\n        return [error, null]\n      }\n    }\n\n    count++\n\n    if (options?.onRetry) options.onRetry(count, count >= max)\n\n    if (max > 0) {\n      return (async function () {\n        await delay(count ** (options?.exponential ?? 1.5) * 1_000)\n\n        return Try(callable, { ...options, count })\n      })()\n    }\n\n    return Try(callable, { ...options, count })\n  }\n}\n\nexport function Try(callable: any, options?: TryOptions) {\n  const max = options?.max ?? 0\n  const isAsync = options?.async ?? isAsyncFunction(callable)\n  let count = options?.count ?? 0\n\n  try {\n    if (isAsync) {\n      return race(options?.timeout ?? 9_999, execute(callable)).catch(e => {\n        if (count >= max) {\n          return options?.onError ? execute(options?.onError, e) : e\n        }\n        \n        count++\n        \n        if (options?.onRetry) options.onRetry(count, count >= max)\n          \n          if (max > 0) {\n          return (async function () {\n            await delay((count ** (options?.exponential ?? 0.5)) * 1_000)\n            return Try(callable, { ...options, count })\n          })()\n        }\n\n        return Try(callable, { ...options, count })\n      })\n    }\n\n    if (isFunction(callable)) {\n      return execute(callable)\n    }\n\n    return execute(callable)\n  } catch (error) {\n    if (count >= max) {\n      if (options?.strict) {\n        throw new TryException(error)\n      } else {\n        return execute(options?.onError, error)\n      }\n    }\n\n    count++\n\n    if (options?.onRetry) options.onRetry(count, count >= max)\n\n    if (max > 0) {\n      return (async function () {\n        await delay((count ** (options?.exponential ?? 0.5)) * 1_000)\n        return Try(callable, { ...options, count })\n      })()\n    }\n\n    return Try(callable, { ...options, count })\n  }\n}\n"],"names":["TryException","Error","constructor","message","statusCode","super","this","name","captureStackTrace","isFunction","fn","_fn$constructor","isAsyncFunction","_fn$constructor2","isPlainRegex","input","_input$constructor","isPlainString","trim","execute","o","params","delay","ms","Promise","resolve","reject","setTimeout","race","milliseconds","promises","timeout","safeTry","callable","options","_options$max","_options$async","_options$count","max","isAsync","async","count","_options$timeout","then","res","catch","e","onError","onRetry","Try","_extends","error","strict","_options$exponential","exponential","_options$max2","_options$async2","_options$count2","_options$timeout2","_options$exponential2","_options$exponential3"],"mappings":"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"}